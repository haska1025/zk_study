/// Generated by tpp compiler. Don't edit!
package com.haska.tpbuff.generated;

import java.util.List;
import java.util.ArrayList;
import com.haska.tpbuff.*;
import java.io.IOException;
public class CloseConf extends CommandHeader implements Command {
  private Conf cc_ref;
  private List<Conf> r_cc_ref;
  private byte b1;
  private byte[] rb;
  private byte i8;
  private byte[] ri8;
  private byte ui8;
  private byte[] rui8;
  private short i16;
  private short[] ri16;
  //The length of the field is 2 bytes
  private int ui16;
  //The length of every element is 2 bytes
  private int[] rui16;
  private int i32;
  private int[] ri32;
  //The length of the field is 4 bytes
  private long ui32;
  //The length of every element is 4 bytes
  private long[] rui32;
  private long i64;
  private long[] ri64;
  private long ui64;
  private long[] rui64;
  private double d;
  private double[] rd;
  private float f;
  private float[] rf;
  private long l;
  private long[] rl;
  private int i;
  private int[] ri;
  private short s;
  private short[] rs;
  private char c;
  private char[] rc;
  private String str;
  private String[] rstr;

  // getter/setter
  public Conf getCc_ref(){return cc_ref;}
  public void setCc_ref(Conf param){cc_ref = param;}
  public List<Conf> getR_cc_ref(){return r_cc_ref;}
  public void setR_cc_ref(List<Conf> param){r_cc_ref = param;}
  public byte getB1(){return b1;}
  public void setB1(byte param){b1=param;}

  public byte[] getRb(){return rb;}
  public void setRb(byte[] param){rb=param;}

  public byte getI8(){return i8;}
  public void setI8(byte param){i8=param;}

  public byte[] getRi8(){return ri8;}
  public void setRi8(byte[] param){ri8=param;}

  public byte getUi8(){return ui8;}
  public void setUi8(byte param){ui8=param;}

  public byte[] getRui8(){return rui8;}
  public void setRui8(byte[] param){rui8=param;}

  public short getI16(){return i16;}
  public void setI16(short param){i16=param;}

  public short[] getRi16(){return ri16;}
  public void setRi16(short[] param){ri16=param;}
  public int getUi16(){return ui16;}
  public void setUi16(int param){ui16=param;}

  public int[] getRui16(){return rui16;}
  public void setRui16(int[] param){rui16=param;}
  public int getI32(){return i32;}
  public void setI32(int param){i32=param;}

  public int[] getRi32(){return ri32;}
  public void setRi32(int[] param){ri32=param;}
  public long getUi32(){return ui32;}
  public void setUi32(long param){ui32=param;}

  public long[] getRui32(){return rui32;}
  public void setRui32(long[] param){rui32=param;}
  public long getI64(){return i64;}
  public void setI64(long param){i64=param;}

  public long[] getRi64(){return ri64;}
  public void setRi64(long[] param){ri64=param;}
  public long getUi64(){return ui64;}
  public void setUi64(long param){ui64=param;}

  public long[] getRui64(){return rui64;}
  public void setRui64(long[] param){rui64=param;}
  public double getD(){return d;}
  public void setD(double param){d=param;}

  public double[] getRd(){return rd;}
  public void setRd(double[] param){rd=param;}
  public float getF(){return f;}
  public void setF(float param){f=param;}

  public float[] getRf(){return rf;}
  public void setRf(float[] param){rf=param;}
  public long getL(){return l;}
  public void setL(long param){l=param;}

  public long[] getRl(){return rl;}
  public void setRl(long[] param){rl=param;}
  public int getI(){return i;}
  public void setI(int param){i=param;}

  public int[] getRi(){return ri;}
  public void setRi(int[] param){ri=param;}
  public short getS(){return s;}
  public void setS(short param){s=param;}

  public short[] getRs(){return rs;}
  public void setRs(short[] param){rs=param;}
  public char getC(){return c;}
  public void setC(char param){c=param;}

  public char[] getRc(){return rc;}
  public void setRc(char[] param){rc=param;}
  public String getStr(){return str;}
  public void setStr(String param){str=param;}

  public String[] getRstr(){return rstr;}
  public void setRstr(String[] param){rstr=param;}

  // constructor
  public CloseConf(){
  }
  public void serialize(OutputArchive oa)throws IOException{
    cc_ref.serialize(oa);

    // Write size firstly
    int r_cc_ref_size = r_cc_ref.size();
    oa.writeInt(r_cc_ref_size);
    // Write element iteratively
    for(int i=0; i < r_cc_ref_size; i++){
      r_cc_ref.get(i).serialize(oa);
    }

    oa.writeByte(b1);

    // Write size firstly
    int rb_size = rb.length;
    oa.writeInt(rb_size);
    // Write element iteratively
    for(int i=0; i < rb_size; i++){
      oa.writeByte(rb[i]);
    }

    oa.writeByte(i8);

    // Write size firstly
    int ri8_size = ri8.length;
    oa.writeInt(ri8_size);
    // Write element iteratively
    for(int i=0; i < ri8_size; i++){
      oa.writeByte(ri8[i]);
    }

    oa.writeByte(ui8);

    // Write size firstly
    int rui8_size = rui8.length;
    oa.writeInt(rui8_size);
    // Write element iteratively
    for(int i=0; i < rui8_size; i++){
      oa.writeByte(rui8[i]);
    }

    oa.writeShort(i16);

    // Write size firstly
    int ri16_size = ri16.length;
    oa.writeInt(ri16_size);
    // Write element iteratively
    for(int i=0; i < ri16_size; i++){
      oa.writeShort(ri16[i]);
    }

    oa.writeShort(ui16);

    // Write size firstly
    int rui16_size = rui16.length;
    oa.writeInt(rui16_size);
    // Write element iteratively
    for(int i=0; i < rui16_size; i++){
      oa.writeShort(rui16[i]);
    }

    oa.writeInt(i32);

    // Write size firstly
    int ri32_size = ri32.length;
    oa.writeInt(ri32_size);
    // Write element iteratively
    for(int i=0; i < ri32_size; i++){
      oa.writeInt(ri32[i]);
    }

    oa.writeUInt(ui32);

    // Write size firstly
    int rui32_size = rui32.length;
    oa.writeInt(rui32_size);
    // Write element iteratively
    for(int i=0; i < rui32_size; i++){
      oa.writeUInt(rui32[i]);
    }

    oa.writeLong(i64);

    // Write size firstly
    int ri64_size = ri64.length;
    oa.writeInt(ri64_size);
    // Write element iteratively
    for(int i=0; i < ri64_size; i++){
      oa.writeLong(ri64[i]);
    }

    oa.writeLong(ui64);

    // Write size firstly
    int rui64_size = rui64.length;
    oa.writeInt(rui64_size);
    // Write element iteratively
    for(int i=0; i < rui64_size; i++){
      oa.writeLong(rui64[i]);
    }

    oa.writeDouble(d);

    // Write size firstly
    int rd_size = rd.length;
    oa.writeInt(rd_size);
    // Write element iteratively
    for(int i=0; i < rd_size; i++){
      oa.writeDouble(rd[i]);
    }

    oa.writeFloat(f);

    // Write size firstly
    int rf_size = rf.length;
    oa.writeInt(rf_size);
    // Write element iteratively
    for(int i=0; i < rf_size; i++){
      oa.writeFloat(rf[i]);
    }

    oa.writeLong(l);

    // Write size firstly
    int rl_size = rl.length;
    oa.writeInt(rl_size);
    // Write element iteratively
    for(int i=0; i < rl_size; i++){
      oa.writeLong(rl[i]);
    }

    oa.writeInt(i);

    // Write size firstly
    int ri_size = ri.length;
    oa.writeInt(ri_size);
    // Write element iteratively
    for(int i=0; i < ri_size; i++){
      oa.writeInt(ri[i]);
    }

    oa.writeShort(s);

    // Write size firstly
    int rs_size = rs.length;
    oa.writeInt(rs_size);
    // Write element iteratively
    for(int i=0; i < rs_size; i++){
      oa.writeShort(rs[i]);
    }

    oa.writeChar(c);

    // Write size firstly
    int rc_size = rc.length;
    oa.writeInt(rc_size);
    // Write element iteratively
    for(int i=0; i < rc_size; i++){
      oa.writeChar(rc[i]);
    }

    oa.writeString(str);

    // Write size firstly
    int rstr_size = rstr.length;
    oa.writeInt(rstr_size);
    // Write element iteratively
    for(int i=0; i < rstr_size; i++){
      oa.writeString(rstr[i]);
    }

  }
  public void deserialize(InputArchive ia)throws IOException{
    if(cc_ref==null) cc_ref = new Conf();
    cc_ref.deserialize(ia);

    // Read size firstly
    int r_cc_ref_size = ia.readInt();
    r_cc_ref = new ArrayList<Conf>();
    // Read element iteratively
    for(int i=0; i < r_cc_ref_size; i++){
      Conf refobj = new Conf();
      refobj.deserialize(ia);
      r_cc_ref.add(refobj);
    }

    b1 = ia.readByte();

    // Read size firstly
    int rb_size = ia.readInt();
    rb = new byte[rb_size];
    // Read element iteratively
    for(int i=0; i < rb_size; i++){
      rb[i] = ia.readByte();
    }

    i8 = ia.readByte();

    // Read size firstly
    int ri8_size = ia.readInt();
    ri8 = new byte[ri8_size];
    // Read element iteratively
    for(int i=0; i < ri8_size; i++){
      ri8[i] = ia.readByte();
    }

    ui8 = ia.readByte();

    // Read size firstly
    int rui8_size = ia.readInt();
    rui8 = new byte[rui8_size];
    // Read element iteratively
    for(int i=0; i < rui8_size; i++){
      rui8[i] = ia.readByte();
    }

    i16 = ia.readShort();

    // Read size firstly
    int ri16_size = ia.readInt();
    ri16 = new short[ri16_size];
    // Read element iteratively
    for(int i=0; i < ri16_size; i++){
      ri16[i] = ia.readShort();
    }

    ui16 = ia.readShort();

    // Read size firstly
    int rui16_size = ia.readInt();
    rui16 = new int[rui16_size];
    // Read element iteratively
    for(int i=0; i < rui16_size; i++){
      rui16[i] = ia.readShort();
    }

    i32 = ia.readInt();

    // Read size firstly
    int ri32_size = ia.readInt();
    ri32 = new int[ri32_size];
    // Read element iteratively
    for(int i=0; i < ri32_size; i++){
      ri32[i] = ia.readInt();
    }

    ui32 = ia.readInt();

    // Read size firstly
    int rui32_size = ia.readInt();
    rui32 = new long[rui32_size];
    // Read element iteratively
    for(int i=0; i < rui32_size; i++){
      rui32[i] = ia.readInt();
    }

    i64 = ia.readLong();

    // Read size firstly
    int ri64_size = ia.readInt();
    ri64 = new long[ri64_size];
    // Read element iteratively
    for(int i=0; i < ri64_size; i++){
      ri64[i] = ia.readLong();
    }

    ui64 = ia.readLong();

    // Read size firstly
    int rui64_size = ia.readInt();
    rui64 = new long[rui64_size];
    // Read element iteratively
    for(int i=0; i < rui64_size; i++){
      rui64[i] = ia.readLong();
    }

    d = ia.readDouble();

    // Read size firstly
    int rd_size = ia.readInt();
    rd = new double[rd_size];
    // Read element iteratively
    for(int i=0; i < rd_size; i++){
      rd[i] = ia.readDouble();
    }

    f = ia.readFloat();

    // Read size firstly
    int rf_size = ia.readInt();
    rf = new float[rf_size];
    // Read element iteratively
    for(int i=0; i < rf_size; i++){
      rf[i] = ia.readFloat();
    }

    l = ia.readLong();

    // Read size firstly
    int rl_size = ia.readInt();
    rl = new long[rl_size];
    // Read element iteratively
    for(int i=0; i < rl_size; i++){
      rl[i] = ia.readLong();
    }

    i = ia.readInt();

    // Read size firstly
    int ri_size = ia.readInt();
    ri = new int[ri_size];
    // Read element iteratively
    for(int i=0; i < ri_size; i++){
      ri[i] = ia.readInt();
    }

    s = ia.readShort();

    // Read size firstly
    int rs_size = ia.readInt();
    rs = new short[rs_size];
    // Read element iteratively
    for(int i=0; i < rs_size; i++){
      rs[i] = ia.readShort();
    }

    c = ia.readChar();

    // Read size firstly
    int rc_size = ia.readInt();
    rc = new char[rc_size];
    // Read element iteratively
    for(int i=0; i < rc_size; i++){
      rc[i] = ia.readChar();
    }

    str = ia.readString();

    // Read size firstly
    int rstr_size = ia.readInt();
    rstr = new String[rstr_size];
    // Read element iteratively
    for(int i=0; i < rstr_size; i++){
      rstr[i] = ia.readString();
    }

  }
  public void dump(){
    cc_ref.dump();

  // Read size firstly
    int r_cc_refsize = r_cc_ref.size();
    // Read element iteratively
    for(int i=0; i < r_cc_refsize; i++){
      r_cc_ref.get(i).dump();
    }

    System.out.printf("b1 = %x", b1).println();
    int rbsize = rb.length;
    // Write element iteratively
    for(int i=0; i < rbsize; i++){
      System.out.printf("rb[%d] = %x",i, rb[i]).println();
    }

    System.out.printf("i8 = %x", i8).println();
    int ri8size = ri8.length;
    // Write element iteratively
    for(int i=0; i < ri8size; i++){
      System.out.printf("ri8[%d] = %x",i, ri8[i]).println();
    }

    System.out.printf("ui8 = %x", ui8).println();
    int rui8size = rui8.length;
    // Write element iteratively
    for(int i=0; i < rui8size; i++){
      System.out.printf("rui8[%d] = %x",i, rui8[i]).println();
    }

    System.out.printf("i16 = %d", i16).println();
    int ri16size = ri16.length;
    // Write element iteratively
    for(int i=0; i < ri16size; i++){
      System.out.printf("ri16[%d] = %d",i, ri16[i]).println();
    }

    System.out.printf("ui16 = %d", ui16).println();
    int rui16size = rui16.length;
    // Write element iteratively
    for(int i=0; i < rui16size; i++){
      System.out.printf("rui16[%d] = %d",i, rui16[i]).println();
    }

    System.out.printf("i32 = %d", i32).println();
    int ri32size = ri32.length;
    // Write element iteratively
    for(int i=0; i < ri32size; i++){
      System.out.printf("ri32[%d] = %d",i, ri32[i]).println();
    }

    System.out.printf("ui32 = %d", ui32).println();
    int rui32size = rui32.length;
    // Write element iteratively
    for(int i=0; i < rui32size; i++){
      System.out.printf("rui32[%d] = %d",i, rui32[i]).println();
    }

    System.out.printf("i64 = %d", i64).println();
    int ri64size = ri64.length;
    // Write element iteratively
    for(int i=0; i < ri64size; i++){
      System.out.printf("ri64[%d] = %d",i, ri64[i]).println();
    }

    System.out.printf("ui64 = %d", ui64).println();
    int rui64size = rui64.length;
    // Write element iteratively
    for(int i=0; i < rui64size; i++){
      System.out.printf("rui64[%d] = %d",i, rui64[i]).println();
    }

    System.out.printf("d = %f", d).println();
    int rdsize = rd.length;
    // Write element iteratively
    for(int i=0; i < rdsize; i++){
      System.out.printf("rd[%d] = %f",i, rd[i]).println();
    }

    System.out.printf("f = %f", f).println();
    int rfsize = rf.length;
    // Write element iteratively
    for(int i=0; i < rfsize; i++){
      System.out.printf("rf[%d] = %f",i, rf[i]).println();
    }

    System.out.printf("l = %d", l).println();
    int rlsize = rl.length;
    // Write element iteratively
    for(int i=0; i < rlsize; i++){
      System.out.printf("rl[%d] = %d",i, rl[i]).println();
    }

    System.out.printf("i = %d", i).println();
    int risize = ri.length;
    // Write element iteratively
    for(int i=0; i < risize; i++){
      System.out.printf("ri[%d] = %d",i, ri[i]).println();
    }

    System.out.printf("s = %d", s).println();
    int rssize = rs.length;
    // Write element iteratively
    for(int i=0; i < rssize; i++){
      System.out.printf("rs[%d] = %d",i, rs[i]).println();
    }

    System.out.printf("c = %c", c).println();
    int rcsize = rc.length;
    // Write element iteratively
    for(int i=0; i < rcsize; i++){
      System.out.printf("rc[%d] = %c",i, rc[i]).println();
    }

    System.out.printf("str = %s", str).println();
    int rstrsize = rstr.length;
    // Write element iteratively
    for(int i=0; i < rstrsize; i++){
      System.out.printf("rstr[%d] = %s",i, rstr[i]).println();
    }

  }
}

